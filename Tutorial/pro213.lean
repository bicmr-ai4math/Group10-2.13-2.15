import Mathlib.Data.Matrix.Basic
import Mathlib.Data.Matrix.Notation
import Mathlib.Data.Matrix.Block
import Mathlib.Data.Matrix.RowCol
import Mathlib.Data.Matrix.Reflection

import Mathlib.Analysis.Calculus.FDeriv.Basic
import Mathlib.Order.Filter.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Matrix

import Mathlib.Data.Nat.Basic
import Mathlib.Data.Real.Basic
import Mathlib.LinearAlgebra.Matrix.Trace
import Mathlib.Algebra.BigOperators.Basic
import Mathlib.Data.Fin.Tuple.Reflection
import Mathlib.LinearAlgebra.Matrix.PosDef
-- import Mathlib.Analysis.Calculus.FDeriv.Basic

#check Filter.Tendsto


#check DifferentiableAt


open Matrix Filter Set Topology

variable {x : ‚Ñù}
#check ùìù x

#check ùìù

variable {mat : Matrix (Fin 2) (Fin 2) ‚Ñù}


#check topologicalRing

--def Tendsto‚ÇÅ {X Y : Type*} (f : X ‚Üí Y) (F : Filter X) (G : Filter Y) :=
  --‚àÄ V ‚àà G, f ‚Åª¬π' V ‚àà F

variable {n m : ‚Ñï}
#check Filter (Matrix (Fin n) (Fin m) ‚Ñù)
#check ùìù x

variable {x‚ÇÄ y‚ÇÄ : ‚Ñù}
variable {f : ‚Ñù ‚Üí ‚Ñù}

#check DifferentiableAt ‚Ñù f x‚ÇÄ
-- (h : DifferentiableAt (Matrix (Fin m) (Fin n) ‚Ñù) f X)



def innerProductofMatrix (n m : Nat) (a b : Matrix (Fin n) (Fin m) ‚Ñù) : ‚Ñù :=
  ‚àë i : Fin n, ‚àë j : Fin m, (a i j) * (b i j)



def HasGateauxDerivAt (m n: Nat) (f : Matrix (Fin m) (Fin n) ‚Ñù ‚Üí ‚Ñù) (X : Matrix (Fin m) (Fin n) ‚Ñù) (f' : Matrix (Fin m) (Fin n) ‚Ñù) : Prop :=
  ‚àÄ V : Matrix (Fin m) (Fin n) ‚Ñù,
    Filter.Tendsto (fun t : ‚Ñù ‚Ü¶ (f (X + t ‚Ä¢ V) - f X ) / t)
      (ùìù[‚â†] 0) (ùìù (innerProductofMatrix m n f' V))

def GateauxDifferentiable (m n: Nat) (f : Matrix (Fin m) (Fin n) ‚Ñù ‚Üí ‚Ñù) (X : Matrix (Fin m) (Fin n) ‚Ñù) : Prop :=
  ‚àÉ G : Matrix (Fin m) (Fin n) ‚Ñù, HasGateauxDerivAt m n f X G

noncomputable section
def GateauxDeriv (m n: Nat) (f : Matrix (Fin m) (Fin n) ‚Ñù ‚Üí ‚Ñù) (X : Matrix (Fin m) (Fin n) ‚Ñù)
  (h : ‚àÉ f', HasGateauxDerivAt m n f X f'): Matrix (Fin m) (Fin n) ‚Ñù :=
  Classical.choose h


def f_aXb (a : Fin m ‚Üí ‚Ñù) (b : Fin n ‚Üí ‚Ñù): Matrix (Fin m) (Fin n) ‚Ñù ‚Üí ‚Ñù :=
  fun X => dotProduct a (mulVec X b)

theorem problem_a (a : Fin m ‚Üí ‚Ñù) (X : Matrix (Fin m) (Fin n) ‚Ñù) (b : Fin n ‚Üí ‚Ñù)
  (h : ‚àÉ f', HasGateauxDerivAt m n (f_aXb a b) X f'):
  GateauxDeriv m n (f_aXb a b) X h = vecMulVec a b :=
  sorry
