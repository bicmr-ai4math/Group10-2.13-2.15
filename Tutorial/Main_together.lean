import Mathlib.Data.Matrix.Basic
import Mathlib.Data.Matrix.Notation
import Mathlib.Data.Matrix.Block
import Mathlib.Data.Matrix.RowCol

import Mathlib.Data.Matrix.Reflection

import Mathlib.Analysis.Calculus.FDeriv.Basic
import Mathlib.Order.Filter.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Matrix

import ¬´Tutorial¬ª.Basic
import Mathlib.LinearAlgebra.Matrix.NonsingularInverse
import Mathlib.Data.Nat.Basic
import Mathlib.Data.Real.Basic
import Mathlib.LinearAlgebra.Matrix.Trace
import Mathlib.Algebra.BigOperators.Basic
import Mathlib.Data.Fin.Tuple.Reflection
import Mathlib.Analysis.SpecialFunctions.Exp
import Mathlib.Data.Nat.Factorization.Basic
import Mathlib.LinearAlgebra.Matrix.PosDef
import Mathlib.LinearAlgebra.Matrix.Adjugate
import Mathlib.LinearAlgebra.FiniteDimensional
import Mathlib.LinearAlgebra.Matrix.Block


-- 2.13
#check Filter.Tendsto

#check DifferentiableAt

open Matrix Filter Set Topology
open BigOperators
open Finset
open Matrix


open InnerProductOfMatrix
theorem final_conclusion (n : Nat) (a b: Matrix (Fin n) (Fin n) ‚Ñù ) :
  PosSemidef a ‚Üí PosSemidef b ‚Üí
    0 ‚â§ ‚ü™a, b‚ü´_‚Ñù  := by
  intro ha hb
  rcases (posSemidef_iff_eq_transpose_mul_self.mp ha) with ‚ü®a1, ha1‚ü©
  rcases (posSemidef_iff_eq_transpose_mul_self.mp hb) with ‚ü®b1, hb1‚ü©
  -- a1: Matrix (Fin n) (Fin n) ‚Ñù
  -- ha1: a = a1·¥¥ * a1
  -- b1: Matrix (Fin n) (Fin n) ‚Ñù
  -- hb1: b = b1·¥¥ * b1
  rw [ha1, hb1]
  rw [<-trace_form_of_inner_product]
  simp [traceMHDotM]
  rw [transpose_mul]
  simp
  rw [mul_assoc]
  rw [trace_mul_comm]
  rw [‚Üê mul_assoc]
  rw [mul_assoc]
  let c := b1 * a1·µÄ
  have hc : 0 ‚â§ trace (c·µÄ * c) := by
    rw [trace_form_of_inner_product]
    exact inner_self_nonneg
  simp at hc
  exact hc



open GateauxDeriv
-- 2.13(a)

-- ËÆ°ÁÆó a^T Xb ÁöÑÂØºÊï∞ÔºåÂ§ßËá¥ÊÄùË∑Ø‰∏∫ÂÆπÊòìÈ™åËØÅÂØºÊï∞ D Â∫îÂΩìÊª°Ë∂≥ D . V = a^T V bÔºåÂèñ D = a^T b ÔºåÂàÜÂà´È™åËØÅ‰∏§‰∏™Á≠âÂºèÂç≥ÂèØ
-- ‰∏ªË¶ÅÂõ∞ÈöæÂú®‰∫éÈúÄË¶ÅÁî®ÂºÄÈõÜÁöÑÊù°‰ª∂ËßÑÁ∫¶Âá∫tendsTo ÂÜÖÈÉ®ÁöÑ t != 0Ôºå
-- ËøôÈáåÈÄöËøáÁî® eventuallyEq_nhdsWithin_of_eqOn ËØÅÊòéÂºïÁêÜÂºïÂØº apply tendsto_congr' Ëá™Âä®ÂåπÈÖçËß£ÂÜ≥
theorem problem_a (a : Fin m ‚Üí ‚Ñù) (X : Matrix (Fin m) (Fin n) ‚Ñù) (b : Fin n ‚Üí ‚Ñù)
  : HasGateauxDerivAt (f_aXb a b) X (vecMulVec a b) := by
    simp [HasGateauxDerivAt]
    simp [Matrix.add_mulVec]
    simp [Matrix.smul_mulVec_assoc]
    simp [‚Üê div_mul_eq_mul_div]
    intro V
    have : innerProductofMatrix (vecMulVec a b) V = a ‚¨ù·µ• mulVec V b := by
      rw [<- f_aXb]
      apply Eq.symm
      apply f_aXb_eq
    rw [this]
    have : (fun t => t / t * a ‚¨ù·µ• mulVec V b) =·∂†[ùìù[‚â†] 0] (fun _ => a ‚¨ù·µ• mulVec V b) := by
      apply eventuallyEq_nhdsWithin_of_eqOn
      intro x h
      simp
      rw [div_self (h), one_mul]
    apply (tendsto_congr' this).mpr
    apply tendsto_const_nhds

-- 2.13(b)
@[simp]
def f_XAX (A : Matrix (Fin m) (Fin m) ‚Ñù) : Matrix (Fin m) (Fin n) ‚Ñù ‚Üí ‚Ñù :=
  fun X => trace (X·µÄ * A * X)

theorem problem_b (A : Matrix (Fin m) (Fin m) ‚Ñù) (X : Matrix (Fin m) (Fin n) ‚Ñù)
  (h : ‚àÉ f', HasGateauxDerivAt (f_XAX A) X f'):
  GateauxDeriv (f_XAX A) X h = (A + A·µÄ) * X  :=
  by
    sorry

-- 2.13(c)
noncomputable
def f_lndet : Matrix (Fin n) (Fin n) ‚Ñù ‚Üí ‚Ñù :=
  fun X => Real.log X.det

theorem problem_c (X : Matrix (Fin n) (Fin n) ‚Ñù) (h : X.det > 0):
  HasGateauxDerivAt (f_lndet) X (X‚Åª¬π)·µÄ := by
    simp [HasGateauxDerivAt]
    simp [f_lndet]
    intro V
    have h_isunitdet : IsUnit X.det := by
      simp [IsUnit]
      linarith [h]
    have h (t : ‚Ñù) : X + t ‚Ä¢ V = X * ( 1 + t ‚Ä¢ X‚Åª¬π * V) := by
      simp [Matrix.mul_add]
      simp [‚Üê Matrix.mul_assoc]
      rw [mul_nonsing_inv]
      simp [Matrix.one_mul]
      assumption
    rw [Metric.tendsto_nhdsWithin_nhds]
    -- ‚àÄ  Œµ > 0, ‚àÉ 0 < Œ¥ < f(Œµ), ....
    -- need to construct f(Œµ)
    simp [h]
    have none_zero_1 : det ( X ) ‚â†  0 := by
      linarith [h]
    have none_zero_2 (x : ‚Ñù) : det ( 1 + x ‚Ä¢ (X‚Åª¬π * V) ) ‚â†  0 := by
      sorry
    simp [Real.log_mul, none_zero_1, none_zero_2]
    let ‚ü®Q, R, h3a, h3b, h3c‚ü©  := schur_decomposition n (X‚Åª¬π * V)
    rw [h3c]
    have h4 : 1 = Q·µÄ * Q := by
      dsimp [Orthogonal_Matrix] at h3a
      exact symm h3a
    rw [h4]
    have h5 : Q = 1 * Q := by
      rw [Matrix.one_mul]
    nth_rewrite 2[h5]
    rw [‚Üê Matrix.mul_assoc]
    have h6: Q·µÄ * R * Q = Q·µÄ * (R * Q) :=by
      rw [Matrix.mul_assoc]
    rw [h6]
    have h7 (t : ‚Ñù ) : t ‚Ä¢ (Q·µÄ * (R * Q)) = Q·µÄ * (t ‚Ä¢ R) * Q :=by
      rw [‚Üê Matrix.mul_assoc]
      rw[Matrix.mul_smul]
      simp
    simp only [h7]
    simp only [‚Üê Matrix.add_mul]
    simp only [‚Üê Matrix.mul_add]
    simp
    have : 1 = Q.det * Q.det := by
      have hh := congrArg Matrix.det h4 -- Â∞ÜÊ≠§ÊÄßË¥®ÂºïÂÖ•Âà∞‚ÄúÂÅáËÆæ‚Äù‰∏≠
      simp at hh
      assumption
    simp only [mul_comm]
    simp only [‚Üê mul_assoc]
    simp [‚Üê this]
    have h8 (x : ‚Ñù) : is_upper_triangle (1 + x ‚Ä¢ R) := by
      apply is_upper_triangle.add
      apply is_upper_triangle.one
      apply is_upper_triangle.smul
      exact h3b
    simp only [upper_triangle_det, h8]
    have h9 (x : ‚Ñù) (i : Fin n): (1 + x ‚Ä¢ R) i i ‚â† 0 := by
      sorry
    simp only [dist]
    intro Œµ
    intro Œµ‚ÇÅ
    sorry

    -- rw [Real.log_prod]
    have ha1: trace (R) = innerProductofMatrix (X‚Åª¬π)·µÄ V :=by
      sorry
    sorry
